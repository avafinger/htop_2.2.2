/* Do not edit this file. It was automatically generated. */

#ifndef HEADER_Platform
#define HEADER_Platform
/*
htop - linux/Platform.h
(C) 2014 Hisham H. Muhammad
(C) 2020 Alexander Finger
Released under the GNU GPL, see the COPYING file
in the source distribution for its full text.
*/

#ifdef WIN32
#elif _POSIX_C_SOURCE >= 199309L
#else
#endif

#include "Action.h"
#include "MainPanel.h"
#include "BatteryMeter.h"
#include "LinuxProcess.h"
#include "SignalsPanel.h"
#ifdef WIN32
#include <windows.h>
#elif _POSIX_C_SOURCE >= 199309L
#include <time.h>   
#else
#include <unistd.h> 
#endif
#include <string.h> 

#ifndef CLAMP
#define CLAMP(x,low,high) (((x)>(high))?(high):(((x)<(low))?(low):(x)))
#endif

extern ProcessField Platform_defaultFields[];

int Platform_cpuBigLITTLE;
extern int Platform_numberOfFields;

extern const SignalItem Platform_signals[];

extern const unsigned int Platform_numberOfSignals;

void Platform_setBindings(Htop_Action* keys);

extern MeterClass* Platform_meterTypes[];

/* cross-platform sleep function */
void sleep_ms(int milliseconds);

int Platform_getGpuTemp(Meter* this);

int Platform_getCpuTemp(Meter* this);

int Platform_getCpuFreq(Meter* this, int cpu);

int Platform_getCpuVcore();

int Platform_getCpuVcore_l(Meter* this);

int Platform_getCpuVcore_b(Meter* this);

int Platform_getCpuBigLITTLE();

int Platform_findCpuBigLITTLE(int cpucount, int *cpuBigLITTLE);

int Platform_getUptime();

void Platform_getLoadAverage(double* one, double* five, double* fifteen);

int Platform_getMaxPid();

double Platform_setCPUValues(Meter* this, int cpu);

void Platform_setMemoryValues(Meter* this);

void Platform_setSwapValues(Meter* this);

char* Platform_getProcessEnv(pid_t pid);

#endif
